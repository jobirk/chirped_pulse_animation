:py:mod:`panim`
===============

.. py:module:: panim


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   panim.k
   panim.sin_sum
   panim.calc_pulses
   panim.animate
   panim.animate_with_time
   panim.plot_pulses



Attributes
~~~~~~~~~~

.. autoapisummary::

   panim.__version__
   panim.c


.. py:data:: __version__
   :annotation: = 0.1.0dev

   

.. py:data:: c
   :annotation: = 1

   

.. py:function:: k(nu, nu_center, k0=1, k1=0, k2=0, k3=0)

   Calculates the wave vector k as a function of the frequency nu

   Parameters
   ----------
   k0 : float, optional
       Zero-order derivative
   k1 : float, optional
       First order derivative dk/dω
   k2 : float, optional
       Second order derivative d^2k/dω^2
   k3 : float, optional
       Third order derivative d^3k/dω^3

   Returns
   -------
   k : float
       Wave vector k(ω)



.. py:function:: sin_sum(z, t, nu_center=1, nu_min=0.001, N_frequencies=4000, spec_width=200, k_i=[1, 5, 0], plotting=False, z_arrow=False, figuresize=(11, 4), savein='')

   Calculates the sum of plane waves (sinusoidal signals) over a
      given frequency spectrum

   Parameters
   ----------
   z : array_like
       Array of the z-axis your wave packet is propagating on.
   t : float
       Time at which you want to calculate the current spatial form of the
       wave (snapshot along the z-axis at that point in time).
   nu_center : float, optional
       Center frequency of the frequency spectrum you are using in the
       simulation. Default is 1.
   nu_min : float, optional
       Minimal frequency that is included in the spectrum. By default the
       spectrum from nu_min to 2*nu_center is considered. Therefore, if you
       are using a very low nu_center, you may have to adjust nu_min as well.
       Default is 0.001.
   N_frequencies : int, optional
       Number of frequencies (spectral components) included in the sum. The
       final spectrum is a numpy.linspace(nu_min, 2 * nu_center). The default
       value for N_frequencies is 4000.
   spec_width : int, optional
       Width of the spectrum. The spectrum is a gaussian signal obtained from
       scipy. The variable spec_width is not exactly the spectral width Δν.
       Instead, a gaussian along the range (0, N_frequencies) is generated
       with standard deviation spec_width. So if you want e.g. a very sharp
       peak at nu_center with N_frequencies=4000, choose e.g. spec_width=100.
       Default is 100.
   k_i : list of floats, optional
       List that contains the values you want to use for the
       frequency-dependent wave vector k. Default is [1, 5, 0].
   plotting : bool, optional
       Bool to turn on the plotting, which will plot some spectral components,
       the resulting total wave (the wave packet) and the underlying spectrum.
       Default is False.
   z_arrow : bool, optional
       Option to plot a arrow with the label 'position z' along the direction
       of propagation. Default is False.
   figuresize : tuple of ints, optional
       Size of the figure when plotting the wave. Default is (11, 4).
   savein : string, optional
       Directory where you want to save the plots.

   Returns
   -------
   E : array
       E-field amplitude along the z-axis at time t.



.. py:function:: calc_pulses(z, t_start, t_end, n_steps, nu_center=1, k_i=[1, 5, 0], spec_width=100)

   Calculates the spatial form of the pulse at different times

   Parameters
   ----------
   z : array_like
       Array of the z-axis your wave packet is propagating on.
   t_start : float
       Start time of the propagation.
   t_end : float
       End time of the propagation.
   n_steps : int
       Number of time steps you want to animate.
   nu_center : float, optional
       Center frequency of the frequency spectrum you are using in the
       simulation. Default is 1.
   k_i : list of floats, optional
       List that contains the values you want to use for the
       frequency-dependent wave vector k. Default is [1, 5, 0].
   spec_width : int, optional
       Width of the spectrum. The spectrum is a gaussian signal obtained from
       scipy. The variable spec_width is not exactly the spectral width Δν.
       Instead, a gaussian along the range (0, N_frequencies) is generated
       with standard deviation spec_width. So if you want e.g. a very sharp
       peak at nu_center with N_frequencies=4000, choose e.g. spec_width=100.
       Default is 100.

   Returns
   -------
   pulses : array
       Array of shape (n_steps, len(z)), which contains the electric field of
       the wave at all time steps.



.. py:function:: animate(z, pulses, ms_between_frames=30, figuresize=(11, 4), saveas='')

   Animates the time evolution of the wave packet

   Parameters
   ----------
   z : array_like
       Array of the z-axis your wave packet is propagating on.
   pulses : array
       Array of shape (n_steps, len(z)), which contains the electric field of
       the wave at all time steps.
   ms_between_frames : int, optional
       Milliseconds of pause between two frames in the animation. Default
       is 30.
   figuresize : tuple of ints, optional
       Size of the figure when plotting the wave. Default is (11, 4).
   saveas : string, optional
       Path where you want to save the animation as .gif-file.



.. py:function:: animate_with_time(z, pulses, ms_between_frames=30, figuresize=(11, 4), saveas='', fixed_z_1=0, fixed_z_2=1, z_offset=0)

   Animates the time evolution of the wave packet

   Parameters
   ----------
   z : array_like
       Array of the z-axis your wave packet is propagating on.
   pulses : array
       Array of shape (n_steps, len(z)), which contains the electric field of
       the wave at all time steps.
   ms_between_frames : int, optional
       Milliseconds of pause between two frames in the animation. Default
       is 30.
   figuresize : tuple of ints, optional
       Size of the figure when plotting the wave. Default is (11, 4).
   saveas : string, optional
       Path where you want to save the animation as .gif-file.
   fixed_z_i : int, optional
       The index of the value z_i in the array `z` that you want to use
       for the animation of the time evolution at that point on the z-axis.



.. py:function:: plot_pulses(z, times, nu_center=0.5, k_i=[1, 10, 0], spec_width=400, no_axes=False, plotname='', dpi=100, figuresize=(11, 4), z_arrow=False, colors=['steelblue' for i in range(10)])

   Plots the pulse at different times

   Parameters
   ----------
   z : array_like
       Array of the z-axis your wave packet is propagating on.
   times : array_like
       Array of the points in time you want to plot.
   nu_center : float, optional
       Center frequency of the frequency spectrum you are using in the
       simulation. Default is 1.
   k_i : list of floats, optional
       List that contains the values you want to use for the
       frequency-dependent wave vector k. Default is [1, 5, 0].
   spec_width : int, optional
       Width of the spectrum. The spectrum is a gaussian signal obtained from
       scipy. The variable spec_width is not exactly the spectral width Δν.
       Instead, a gaussian along the range (0, N_frequencies) is generated
       with standard deviation spec_width. So if you want e.g. a very sharp
       peak at nu_center with N_frequencies=4000, choose e.g. spec_width=100.
       Default is 100.
   no_axes : bool, optional
       Option to turn of the plotting of the axes. Default is False.
   plotname : str, optional
       Path of the plot, except for the ".pdf", in case you want to save the
       plot. If more than one time step is to be plotted, the for each time
       step a plot is produced, containing the previous timesteps and the
       current one. Default is "", corresponding to not saving the plot.
   dpi : int, optional
       Number of DPI in the plots. Default is 100.
   figuresize : tuple of ints, optional
       Size of the figure when plotting the wave. Default is (11, 4).
   z_arrow : bool, optional
       Option to plot a arrow with the label 'position z' along the direction
       of propagation. Default is False.
   colors : list of str, optional
       The colors you want to use for the different time steps. By default all
       time steps are plotted with the standard python 'steelblue'.



