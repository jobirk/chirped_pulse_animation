:py:mod:`panim`
===============

.. py:module:: panim


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   panim.k
   panim.sin_sum
   panim.calc_pulses
   panim.animate
   panim.animate_with_time
   panim.plot_pulses



Attributes
~~~~~~~~~~

.. autoapisummary::

   panim.__version__
   panim.c


.. py:data:: __version__
   :annotation: = 0.1.0dev

   

.. py:data:: c
   :annotation: = 1

   

.. py:function:: k(nu, nu_center, k0=1, k1=0, k2=0, k3=0)

   Calculates the wave vector k as a function of the frequency nu

   :param k0: Zero-order derivative
   :type k0: float, optional
   :param k1: First order derivative dk/dω
   :type k1: float, optional
   :param k2: Second order derivative d^2k/dω^2
   :type k2: float, optional
   :param k3: Third order derivative d^3k/dω^3
   :type k3: float, optional

   :returns: **k** -- Wave vector k(ω)
   :rtype: float


.. py:function:: sin_sum(z, t, nu_center=1, nu_min=0.001, N_frequencies=4000, spec_width=200, k_i=[1, 5, 0], plotting=False, z_arrow=False, figuresize=(11, 4), savein='')

   Calculates the sum of plane waves (sinusoidal signals) over a
      given frequency spectrum

   :param z: Array of the z-axis your wave packet is propagating on.
   :type z: array_like
   :param t: Time at which you want to calculate the current spatial form of the
             wave (snapshot along the z-axis at that point in time).
   :type t: float
   :param nu_center: Center frequency of the frequency spectrum you are using in the
                     simulation. Default is 1.
   :type nu_center: float, optional
   :param nu_min: Minimal frequency that is included in the spectrum. By default the
                  spectrum from nu_min to 2*nu_center is considered. Therefore, if you
                  are using a very low nu_center, you may have to adjust nu_min as well.
                  Default is 0.001.
   :type nu_min: float, optional
   :param N_frequencies: Number of frequencies (spectral components) included in the sum. The
                         final spectrum is a numpy.linspace(nu_min, 2 * nu_center). The default
                         value for N_frequencies is 4000.
   :type N_frequencies: int, optional
   :param spec_width: Width of the spectrum. The spectrum is a gaussian signal obtained from
                      scipy. The variable spec_width is not exactly the spectral width Δν.
                      Instead, a gaussian along the range (0, N_frequencies) is generated
                      with standard deviation spec_width. So if you want e.g. a very sharp
                      peak at nu_center with N_frequencies=4000, choose e.g. spec_width=100.
                      Default is 100.
   :type spec_width: int, optional
   :param k_i: List that contains the values you want to use for the
               frequency-dependent wave vector k. Default is [1, 5, 0].
   :type k_i: list of floats, optional
   :param plotting: Bool to turn on the plotting, which will plot some spectral components,
                    the resulting total wave (the wave packet) and the underlying spectrum.
                    Default is False.
   :type plotting: bool, optional
   :param z_arrow: Option to plot a arrow with the label 'position z' along the direction
                   of propagation. Default is False.
   :type z_arrow: bool, optional
   :param figuresize: Size of the figure when plotting the wave. Default is (11, 4).
   :type figuresize: tuple of ints, optional
   :param savein: Directory where you want to save the plots.
   :type savein: string, optional

   :returns: **E** -- E-field amplitude along the z-axis at time t.
   :rtype: array


.. py:function:: calc_pulses(z, t_start, t_end, n_steps, nu_center=1, k_i=[1, 5, 0], spec_width=100)

   Calculates the spatial form of the pulse at different times

   :param z: Array of the z-axis your wave packet is propagating on.
   :type z: array_like
   :param t_start: Start time of the propagation.
   :type t_start: float
   :param t_end: End time of the propagation.
   :type t_end: float
   :param n_steps: Number of time steps you want to animate.
   :type n_steps: int
   :param nu_center: Center frequency of the frequency spectrum you are using in the
                     simulation. Default is 1.
   :type nu_center: float, optional
   :param k_i: List that contains the values you want to use for the
               frequency-dependent wave vector k. Default is [1, 5, 0].
   :type k_i: list of floats, optional
   :param spec_width: Width of the spectrum. The spectrum is a gaussian signal obtained from
                      scipy. The variable spec_width is not exactly the spectral width Δν.
                      Instead, a gaussian along the range (0, N_frequencies) is generated
                      with standard deviation spec_width. So if you want e.g. a very sharp
                      peak at nu_center with N_frequencies=4000, choose e.g. spec_width=100.
                      Default is 100.
   :type spec_width: int, optional

   :returns: **pulses** -- Array of shape (n_steps, len(z)), which contains the electric field of
             the wave at all time steps.
   :rtype: array


.. py:function:: animate(z, pulses, ms_between_frames=30, figuresize=(11, 4), saveas='')

   Animates the time evolution of the wave packet

   :param z: Array of the z-axis your wave packet is propagating on.
   :type z: array_like
   :param pulses: Array of shape (n_steps, len(z)), which contains the electric field of
                  the wave at all time steps.
   :type pulses: array
   :param ms_between_frames: Milliseconds of pause between two frames in the animation. Default
                             is 30.
   :type ms_between_frames: int, optional
   :param figuresize: Size of the figure when plotting the wave. Default is (11, 4).
   :type figuresize: tuple of ints, optional
   :param saveas: Path where you want to save the animation as .gif-file.
   :type saveas: string, optional


.. py:function:: animate_with_time(z, pulses, ms_between_frames=30, figuresize=(11, 4), saveas='', fixed_z_1=0, fixed_z_2=1, z_offset=0)

   Animates the time evolution of the wave packet

   :param z: Array of the z-axis your wave packet is propagating on.
   :type z: array_like
   :param pulses: Array of shape (n_steps, len(z)), which contains the electric field of
                  the wave at all time steps.
   :type pulses: array
   :param ms_between_frames: Milliseconds of pause between two frames in the animation. Default
                             is 30.
   :type ms_between_frames: int, optional
   :param figuresize: Size of the figure when plotting the wave. Default is (11, 4).
   :type figuresize: tuple of ints, optional
   :param saveas: Path where you want to save the animation as .gif-file.
   :type saveas: string, optional
   :param fixed_z_i: The index of the value z_i in the array `z` that you want to use
                     for the animation of the time evolution at that point on the z-axis.
   :type fixed_z_i: int, optional


.. py:function:: plot_pulses(z, times, nu_center=0.5, k_i=[1, 10, 0], spec_width=400, no_axes=False, plotname='', dpi=100, figuresize=(11, 4), z_arrow=False, colors=['steelblue' for i in range(10)])

   Plots the pulse at different times

   :param z: Array of the z-axis your wave packet is propagating on.
   :type z: array_like
   :param times: Array of the points in time you want to plot.
   :type times: array_like
   :param nu_center: Center frequency of the frequency spectrum you are using in the
                     simulation. Default is 1.
   :type nu_center: float, optional
   :param k_i: List that contains the values you want to use for the
               frequency-dependent wave vector k. Default is [1, 5, 0].
   :type k_i: list of floats, optional
   :param spec_width: Width of the spectrum. The spectrum is a gaussian signal obtained from
                      scipy. The variable spec_width is not exactly the spectral width Δν.
                      Instead, a gaussian along the range (0, N_frequencies) is generated
                      with standard deviation spec_width. So if you want e.g. a very sharp
                      peak at nu_center with N_frequencies=4000, choose e.g. spec_width=100.
                      Default is 100.
   :type spec_width: int, optional
   :param no_axes: Option to turn of the plotting of the axes. Default is False.
   :type no_axes: bool, optional
   :param plotname: Path of the plot, except for the ".pdf", in case you want to save the
                    plot. If more than one time step is to be plotted, the for each time
                    step a plot is produced, containing the previous timesteps and the
                    current one. Default is "", corresponding to not saving the plot.
   :type plotname: str, optional
   :param dpi: Number of DPI in the plots. Default is 100.
   :type dpi: int, optional
   :param figuresize: Size of the figure when plotting the wave. Default is (11, 4).
   :type figuresize: tuple of ints, optional
   :param z_arrow: Option to plot a arrow with the label 'position z' along the direction
                   of propagation. Default is False.
   :type z_arrow: bool, optional
   :param colors: The colors you want to use for the different time steps. By default all
                  time steps are plotted with the standard python 'steelblue'.
   :type colors: list of str, optional


